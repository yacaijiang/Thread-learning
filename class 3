

线程传参数详解，detach（）大坑，成员函数做线程函数

传递临时对象作为线程参数：
引用作为值传递时，实际不是引用值，而是复制原参数。
指针在detach子线程时，会引发异常。
只要用临时构造的A类对象作为参数传递给线程，那么就一定能够在主线程执行完毕前把线程函数的参数构造出来。

综述：
a.	若传递int 这种简单类型参数，建议都是值传递，不要使用引用
b.	若传递类对象，避免隐式类型转换。全部在创建线程时构建出临时对象，在函数参数里用引用接收，否则系统还会构造一次临时对象
建议多线程操作时不使用detach（），只使用join（）。

线程id概念：
不同线程对应不同线程id，线程id可以用c++标准库里的函数来获取，std::this_thread::get_id();

传递类对象、智能指针作为线程参数；mutable int i；mutable 任何时刻都可以修改该值，
使用引用前面必须使用const限定；
std::ref函数传递地址：

int x=0;
std::ref(x)；
传递的为x的地址；
unique_ptr<int>  //智能指针


用成员函数指针做线程函数 
