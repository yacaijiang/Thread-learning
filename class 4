创建和等待多个线程</br>


数据共享问题分析</br>
只读数据，是安全稳定的，可以直接使用</br>
有读有写，当有不同线程同时进行读写时，会崩溃；</br>

共享数据的保护案例代码：</br>
网络游戏服务器，假设有两个自己创建的线程，</br>
一个收集玩家命令，并且将命令数据写入队列；</br>
另外一个线程从队列中取出玩家命令，解析执行玩家动作</br>
vector,list;学习相关知识</br>

```
#include "pch.h"
#include <iostream>
#include<thread>
#include<list>
class A {
public:
	//收到消息放入一个队列的线程中
	void inMsgRecvQueue() {
		for (int i = 0; i < 1; ++i) {
			std::cout << "inMsgRecvQueue(),插入一个元素" << i << std::endl;
			msgRecvQueue.push_back(i);
		}
	}
	//把消息从队列中取出
	void outMsgRecvQueue() {
		for (int i = 0; i < 100; ++i) {
			if (!msgRecvQueue.empty()) {
				//消息队列不空
				int command = msgRecvQueue.front();//返回第一个元素
				msgRecvQueue.pop_front();//移除第一个
				//处理数据...
			}
			else {
				std::cout << "outMsgRecvQueue(), 非空" << i << std::endl;
			}
		}
	}
private:
	std::list<int> msgRecvQueue;//消息队列
};
int main()
{

	A myobja;
	std::thread myOutMsgObj(&A::outMsgRecvQueue, &myobja);
	std::thread myInMsgObj(&A::inMsgRecvQueue, &myobja);
	myInMsgObj.join();
	myOutMsgObj.join();

	std::cout << "middle" << std::endl;
	return 0;
}
```
因为使用了msgRecvQueue这个可读可写的变量，如此执行会出现异常；
