并发与多线程


并发、线程、进程概念：
并发：两个或者更多的任务（独立的活动）同时发生（进行）：一个程序同时执行多个独立的任务；
以往计算机、单核cpu（中央处理器）：某一时刻只能执行一个任务：由操作系统调度，每秒为单位多次任务切换；（并非真正的并发）；上下文切换有时间开销；
多核cpu实现真正的并行执行（硬件并发）；
并发：提高性能

可执行程序：
可执行文件，Linux下，ls -ls rwx  (x执行权限)

进程：
linux下./文件名运行可执行程序；
可执行程序运行起来就是创建了一个进程；
进程就是一个运行起来的可执行程序；

线程：
每个进程，都有一个主线程，这个主线程是唯一的，即一个进程只有一个主线程；
当你执行一个可执行程序，产生了一个进程后，这个主线程就随进程一起启动；
运行某程序时，实际为进程的主线程来执行；
线程即为执行程序的；线程为一条代码的执行通路；
除了主线程之外，可以通过自己写代码来创建其他线程；
每创建一个新线程，就可以在同一时刻多干一个不同的事情；
多线程（并发）
线程不是越多越好，每个线程都需要一个独立的堆栈空间，线程之间的切换要保存很多中间状态；
总结线程：
线程用于执行代码；
线程为一条代码执行通路；
一个进程自动包含一个主线程，可以自己创建多个其他线程；建议不超过200-300；
由于主线程自动启动，一个进程中最少有一个线程（主线程）；
多线程程序可同时执行多个代码，运行效率高；



并发的实现方法：

a)	通过多个进程实现并发；
b)	在单独的进程中，创建多线程来实现并发；

多进程并发：

Word启动后，ie浏览器启动；
游戏逻辑服务器、账户服务器、服务器之间通信；
进程间通信（同一电脑：管道、文件、消息队列、共享内存；不同电脑：socket通信技术）；

多线程并发：

线程：轻量级进程，每个线程都有自己独立的运行路径，但是一个进程中所有线程共享地址空间（共享内存）

全局变量、指针、引用都可以在线程间传递；

共享内存：带来了数据一致性问题：


多进程并发和多线程并发可混合使用，优先考虑多线程；


与进程相比，线程优点：
1.	线程启动速度更快、更轻量级；
2.	系统资源开销更少，执行速度更快，比如共享内存通信方式比其他方式都快；

缺点：
使用有一定难度；数据一致性问题；


C++11新标准线程库
以往：Windows；CreateThread(), _beginthred(), beginthredexe()创建线程
Linux：pthread_create():创建线程
临界区、互斥量；
以往多线程代码不能跨平台；
POSIX thread（pthread）：跨平台；

新标准下，c++语言本身增加了对多线程的支持，意味着可移植性；

